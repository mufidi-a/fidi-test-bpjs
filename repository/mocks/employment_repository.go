// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "test-bpjs/v2/models"

	mock "github.com/stretchr/testify/mock"
)

// EmploymentRepository is an autogenerated mock type for the EmploymentRepository type
type EmploymentRepository struct {
	mock.Mock
}

// CreateEmployment provides a mock function with given fields: ctx, payload
func (_m *EmploymentRepository) CreateEmployment(ctx context.Context, payload *models.Employment) (*models.EmploymentDTO, error) {
	ret := _m.Called(ctx, payload)

	var r0 *models.EmploymentDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Employment) (*models.EmploymentDTO, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Employment) *models.EmploymentDTO); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmploymentDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Employment) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployment provides a mock function with given fields: ctx, id, code
func (_m *EmploymentRepository) DeleteEmployment(ctx context.Context, id int, code int) error {
	ret := _m.Called(ctx, id, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmploymentByProfileCode provides a mock function with given fields: ctx, code
func (_m *EmploymentRepository) GetEmploymentByProfileCode(ctx context.Context, code int) ([]*models.EmploymentDTO, error) {
	ret := _m.Called(ctx, code)

	var r0 []*models.EmploymentDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.EmploymentDTO, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.EmploymentDTO); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.EmploymentDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEmploymentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmploymentRepository creates a new instance of EmploymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmploymentRepository(t mockConstructorTestingTNewEmploymentRepository) *EmploymentRepository {
	mock := &EmploymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
