// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "test-bpjs/v2/models"

	mock "github.com/stretchr/testify/mock"
)

// SkillRepository is an autogenerated mock type for the SkillRepository type
type SkillRepository struct {
	mock.Mock
}

// CreateSkill provides a mock function with given fields: ctx, payload
func (_m *SkillRepository) CreateSkill(ctx context.Context, payload *models.Skill) (*models.SkillDTO, error) {
	ret := _m.Called(ctx, payload)

	var r0 *models.SkillDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Skill) (*models.SkillDTO, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Skill) *models.SkillDTO); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SkillDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Skill) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSkill provides a mock function with given fields: ctx, code, id
func (_m *SkillRepository) DeleteSkill(ctx context.Context, code int, id int) error {
	ret := _m.Called(ctx, code, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, code, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSkillsByProfileCode provides a mock function with given fields: ctx, code
func (_m *SkillRepository) GetSkillsByProfileCode(ctx context.Context, code int) ([]*models.SkillDTO, error) {
	ret := _m.Called(ctx, code)

	var r0 []*models.SkillDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.SkillDTO, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.SkillDTO); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SkillDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSkillRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSkillRepository creates a new instance of SkillRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSkillRepository(t mockConstructorTestingTNewSkillRepository) *SkillRepository {
	mock := &SkillRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
