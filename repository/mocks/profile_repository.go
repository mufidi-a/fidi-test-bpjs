// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "test-bpjs/v2/models"

	mock "github.com/stretchr/testify/mock"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: ctx, payload
func (_m *ProfileRepository) CreateProfile(ctx context.Context, payload *models.Profile) (*models.ProfileDTO, error) {
	ret := _m.Called(ctx, payload)

	var r0 *models.ProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Profile) (*models.ProfileDTO, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Profile) *models.ProfileDTO); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Profile) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePhotoByCode provides a mock function with given fields: ctx, code
func (_m *ProfileRepository) DeletePhotoByCode(ctx context.Context, code int) (*models.DefaultResponse, error) {
	ret := _m.Called(ctx, code)

	var r0 *models.DefaultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.DefaultResponse, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.DefaultResponse); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DefaultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByCode provides a mock function with given fields: ctx, code
func (_m *ProfileRepository) GetProfileByCode(ctx context.Context, code int) (*models.ProfileDTO, error) {
	ret := _m.Called(ctx, code)

	var r0 *models.ProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.ProfileDTO, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ProfileDTO); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkingExperienceByCode provides a mock function with given fields: ctx, code
func (_m *ProfileRepository) GetWorkingExperienceByCode(ctx context.Context, code int) (*models.ProfileDTO, error) {
	ret := _m.Called(ctx, code)

	var r0 *models.ProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.ProfileDTO, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ProfileDTO); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, code, payload
func (_m *ProfileRepository) UpdateProfile(ctx context.Context, code int, payload *models.Profile) (*models.ProfileDTO, error) {
	ret := _m.Called(ctx, code, payload)

	var r0 *models.ProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Profile) (*models.ProfileDTO, error)); ok {
		return rf(ctx, code, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Profile) *models.ProfileDTO); ok {
		r0 = rf(ctx, code, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *models.Profile) error); ok {
		r1 = rf(ctx, code, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProfileRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProfileRepository creates a new instance of ProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProfileRepository(t mockConstructorTestingTNewProfileRepository) *ProfileRepository {
	mock := &ProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
